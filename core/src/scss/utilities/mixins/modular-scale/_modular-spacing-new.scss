@charset "UTF-8";

///
/// Modular Spacing New
/// Mixins for modular scaling, a unitless system for returning font sizes or spacing (padding or margin) values.
/// Our modular spacing system does not use the Bourbon modular-scale mixin. Instead we use a manual scale defined in variables/core/_modular-spacing.scss for finetuning.
/// A mixin for adding spacing (margin or padding) between elements or between an
/// element and the edge of its container. The amount of spacing is returned
/// using a unitless scaling system with a curated scale.
/// Please see core/scss/utilities/variables/core/_modular-spacing.scss for
/// variable maps.
///
/// @name modular-spacing-new
///
/// @example scss
///   @include modular-spacing-new('padding', 2 null);
///   @include modular-spacing-new('margin', 0 -4 1 2);
///
/// @param {string} $type  Spacing type, either 'padding' or 'margin'.
/// @param {list} $steps - List (1 to 4 values): Either integer (from -4 to 10 including 0) or null. Follows the shorthand notation of padding/margin. Use null to skip a side. A value of 0 returns the modular spacing base value for that breakpoint.
/// @param {map} $grid - Breakpoint device sass map. Defaults to $su-grid-device.
///
/// @group mixin
@mixin modular-spacing-new($type: 'padding', $steps: 0, $grid: $su-grid-device) {
  @each $key, $breakpoint in $grid {
    @include grid-media-device($key) {
      @if length($steps) == 1 {
        #{$type}: get-modular-spacing-value($steps, $key);
      }
      @else if length($steps) == 2 {
        @if nth($steps, 1) != null {
          #{$type}-top: get-modular-spacing-value(nth($steps, 1), $key);
          #{$type}-bottom: get-modular-spacing-value(nth($steps, 1), $key);
        }

        @if nth($steps, 2) != null {
          #{$type}-left: get-modular-spacing-value(nth($steps, 2), $key);
          #{$type}-right: get-modular-spacing-value(nth($steps, 2), $key);
        }
      }
      @else if length($steps) == 3 {
        @if nth($steps, 1) != null {
          #{$type}-top: get-modular-spacing-value(nth($steps, 1), $key);
        }

        @if nth($steps, 2) != null {
          #{$type}-right: get-modular-spacing-value(nth($steps, 2), $key);
          #{$type}-left: get-modular-spacing-value(nth($steps, 2), $key);
        }

        @if nth($steps, 3) != null {
          #{$type}-bottom: get-modular-spacing-value(nth($steps, 3), $key);
        }
      }
      @else if length($steps) == 4 {
        @if nth($steps, 1) != null {
          #{$type}-top: get-modular-spacing-value(nth($steps, 1), $key);
        }

        @if nth($steps, 2) != null {
          #{$type}-right: get-modular-spacing-value(nth($steps, 2), $key);
        }

        @if nth($steps, 3) != null {
          #{$type}-bottom: get-modular-spacing-value(nth($steps, 3), $key);
        }

        @if nth($steps, 4) != null {
          #{$type}-left: get-modular-spacing-value(nth($steps, 4), $key);
        }
      }
      @else if length($steps) > 4 or length($steps) == 0 {
        @error '$steps should have 1 to 4 values';
      }
    }
  }
}
