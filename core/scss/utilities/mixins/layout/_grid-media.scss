@charset 'UTF-8';

//
// @grid-media($breakpoint: 'xs', $grid: '1fr 1fr 1fr 1fr')
//
// A mixin for quickly defining a grid at a provided breakpoint.
//
// $breakpoint  - String: One of xs, sm, md, lg, xl
// $grid        - String: CSS grid definition of grid-columns
//
// Styleguide Mixins.Layout.Grid.Grid Media
//
@mixin grid-media($breakpoint: 'xs', $columns: 1fr 1fr 1fr 1fr) {

  $breakpoint-map: (
    'xs': $breakpoint-xs,
    'sm': $breakpoint-sm,
    'md': $breakpoint-md,
    'lg': $breakpoint-lg,
    'xl': $breakpoint-xl
  );

  $gutter-map:  (
    'xs': $gutter-xs,
    'sm': $gutter-sm,
    'md': $gutter-md,
    'lg': $gutter-lg,
    'xl': $gutter-xl
  );

  @media #{map-get($breakpoint-map, $breakpoint)} {
    @include grid-columns($columns); // Can't use repeat() function in IE
    padding-left: map-get($gutter-map, $breakpoint);
    padding-right: map-get($gutter-map, $breakpoint);
    @include grid-column-gap(map-get($gutter-map, $breakpoint));
    @content;
  }

}


//
// @grid-media-only($breakpoint: 'xs', $grid: '1fr 1fr 1fr 1fr')
//
// A mixin for quickly defining a grid at a provided breakpoint.
//
// $breakpoint  - String: One of xs, sm, md, lg, xl
// $grid        - String: CSS grid definition of grid-columns
//
// Styleguide Mixins.Layout.Grid.Grid Media
//
@mixin grid-media-only($breakpoint: 'xs', $columns: 1fr 1fr 1fr 1fr) {

  $breakpoint-map: (
    'xs': $breakpoint-xs-only,
    'sm': $breakpoint-sm-only,
    'md': $breakpoint-md-only,
    'lg': $breakpoint-lg-only,
    'xl': $breakpoint-xl
  );

  $gutter-map:  (
    'xs': $gutter-xs,
    'sm': $gutter-sm,
    'md': $gutter-md,
    'lg': $gutter-lg,
    'xl': $gutter-xl
  );

  @media #{map-get($breakpoint-map, $breakpoint)} {
    @include grid-columns($columns); // Can't use repeat() function in IE
    padding-left: map-get($gutter-map, $breakpoint);
    padding-right: map-get($gutter-map, $breakpoint);
    @include grid-column-gap(map-get($gutter-map, $breakpoint));
    @content;
  }

}
