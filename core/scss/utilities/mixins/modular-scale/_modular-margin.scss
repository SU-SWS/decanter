@charset "UTF-8";

//
// @modular-margin
//
// A modular margin mixin for default spacing around an element.
//
// Style guide: Mixins.Modular.modular-margin
//
@mixin modular-margin($scale: 0, $grid: $grid-media) {
  @each $key, $breakpoint in $grid {
    @include grid-media($key) {
      @if $scale == 0 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'md');
      } @else if $scale == 1 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'lg');
      } @else if $scale == 2 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xl');
      } @else if $scale == 3 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xl');
      } @else if $scale == 4 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xl');
      } @else if $scale == 5 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '4xl');
      } @else if $scale == -1 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'sm');
      } @else if $scale == -2 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xs');
      } @else if $scale == -3 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xs');
      } @else if $scale == -4 {
        margin: map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xs');
      }
    }
  }
}
