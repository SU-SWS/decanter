@charset "UTF-8";

//
// @modular-padding-vertical
//
// A mixin for adding modular top/bottom padding to an element.
//
// Style guide: Mixins.Modular.modular-padding-vertical
//
@mixin modular-padding-vertical($scale: 0, $grid: $grid-media) {
  @each $key, $breakpoint in $grid {
    @include grid-media($key) {
      @if $scale == 0 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'md')) null);

      } @else if $scale == 1 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'lg')) null);

      } @else if $scale == 2 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xl')) null);

      } @else if $scale == 3 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xl')) null);

      } @else if $scale == 4 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xl')) null);

      } @else if $scale == 5 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '4xl')) null);

      } @else if $scale == -1 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'sm')) null);

      } @else if $scale == -2 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xs')) null);

      } @else if $scale == -3 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xs')) null);

      } @else if $scale == -4 {
        @include padding((map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xs')) null);

      }
    }
  }
}
