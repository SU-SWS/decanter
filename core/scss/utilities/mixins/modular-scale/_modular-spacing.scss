@charset "UTF-8";

//
// @modular-spacing
//
// A mixin for adding spacing (margin or padding) between elements or between an element and the edge of its container.
// The amount of spacing is returned using a unitless scaling system with a curated scale.
//
// Please see core/scss/utilities/variables/core/_modular-spacing.scss for variable maps.
//
// **Examples:**
// - `@include modular-spacing(3);`
// - `@include modular-spacing('padding', 2 null)`
// - `@include modular-spacing('margin', 0 -4 1 2)`
//
// $type - String: Spacing type, either 'padding' or 'margin'.
// $steps - List (1 to 4 values): Either integer (from -4 to 5 including 0) or null. Follows the shorthand notation of padding/margin. Use null to skip a side.
// A value of 0 returns the modular spacing base value for that breakpoint.
//
// Style guide: Mixins.Modular.modular-spacing
//

@mixin modular-spacing($type: 'padding', $steps: 0, $grid: $grid-media) {
  @each $key, $breakpoint in $grid {
    @include grid-media($key) {
      @if length($steps) == 1 {
        #{$type}: (calculate-modular-spacing($steps, $key));
      } @else if length($steps) == 2 {
        @if nth($steps, 1) != null {
          #{$type}-top: (calculate-modular-spacing(nth($steps, 1), $key));
          #{$type}-bottom: (calculate-modular-spacing(nth($steps, 1), $key));
        }

        @if nth($steps, 2) != null {
          #{$type}-left: (calculate-modular-spacing(nth($steps, 2), $key));
          #{$type}-right: (calculate-modular-spacing(nth($steps, 2), $key));
        }
      } @else if length($steps) == 3 {
        @if nth($steps, 1) != null {
          #{$type}-top: (calculate-modular-spacing(nth($steps, 1), $key));
        }

        @if nth($steps, 2) != null {
          #{$type}-right: (calculate-modular-spacing(nth($steps, 2), $key));
          #{$type}-left: (calculate-modular-spacing(nth($steps, 2), $key));
        }

        @if nth($steps, 3) != null {
          #{$type}-bottom: (calculate-modular-spacing(nth($steps, 3), $key));
        }
      } @else if length($steps) == 4 {
        @if nth($steps, 1) != null {
          #{$type}-top: (calculate-modular-spacing(nth($steps, 1), $key));
        }

        @if nth($steps, 2) != null {
          #{$type}-right: (calculate-modular-spacing(nth($steps, 2), $key));
        }

        @if nth($steps, 3) != null {
          #{$type}-bottom: (calculate-modular-spacing(nth($steps, 3), $key));
        }

        @if nth($steps, 4) != null {
          #{$type}-left: (calculate-modular-spacing(nth($steps, 4), $key));
        }
      } @else if length($steps) > 4 or length($steps) == 0 {
        @error '$steps should have 1 to 4 values';
      }
    }
  }
}
