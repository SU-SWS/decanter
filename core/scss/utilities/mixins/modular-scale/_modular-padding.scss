@charset "UTF-8";

//
// @modular-padding
//
// A mixin for adding modular padding around an element
//
// Style guide: Mixins.Modular.modular-padding
//
@mixin modular-padding($scale: 0, $grid: $grid-media) {
  @each $key, $breakpoint in $grid {
    @include grid-media($key) {
      @if $scale == 0 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'md'));

      } @else if $scale == 1 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'lg'));

      } @else if $scale == 2 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xl'));

      } @else if $scale == 3 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xl'));

      } @else if $scale == 4 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xl'));

      } @else if $scale == 5 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '4xl'));

      } @else if $scale == -1 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'sm'));

      } @else if $scale == -2 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, 'xs'));

      } @else if $scale == -3 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '2xs'));

      } @else if $scale == -4 {
        @include padding(map_get($modular-spacing-base, $key) * map_get($modular-spacing-multiplier, '3xs'));

      }
    }
  }
}
