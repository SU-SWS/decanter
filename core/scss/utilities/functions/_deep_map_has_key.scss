@charset "UTF-8";

//
// su_deep_map_has_key($map, $key, $delimiter)
//
// search a nested map to see if $key resolves to a value
//
// $map - the map you want to search; may be nested multiple levels
// $key - the key you want to search for; use $delimiter to separate levels
// $delimiter - optional - the string used to separate $key into levels - default is '.'
//
// Style guide: Functions.su_deep_map_has_key
//

@function su_deep_map_has_key($map, $key, $delimiter: '.') {
  @if type_of($map) != 'map' {
    @error 'su_deep_map_has_key: $map must be a map. Received "#{$map}"';
  }
  @if type-of($key) != 'string' {
    @error 'su_deep_map_has_key: $key must be a string. Received "#{$key}"';
  }
  @if type-of($delimiter) != 'string' {
    @error 'su_deep_map_has_key: $delimiter must be a string. Received "#{$delimiter}"';
  }

  $keys: su_str_explode( $key, $delimiter);
  @each $key in $keys {
    @if type_of( $map ) != 'map' or not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}
