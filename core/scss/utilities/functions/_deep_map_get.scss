@charset "UTF-8";

//
// su_deep_map_get($map, $path, $delimiter)
//
// traverse $path into a nested $map and return the corresponding value
//
// $map - the map you want to retrieve a value from; may be nested multiple levels
// $path - the key whose value you want to retrieve; use $delimiter to separate levels
// $delimiter - optional - the string used to separate $path into levels - default is '.'
//
// Style guide: Functions.su_deep_map_get
//

@function su_deep_map_get($map, $path, $delimiter: '.') {
  @if type_of($map) != 'map' {
    @error 'su_deep_map_get: $map must be a map. Received (#{$map})';
  }
  @if type-of($path) != 'string' {
    @error 'su_deep_map_get: $path must be a string. Received (#{$path})';
  }
  @if type-of($delimiter) != 'string' {
    @error 'su_deep_map_get: $delimiter must be a string. Received (#{$delimiter})';
  }

  $keys: su_str_explode( $path, $delimiter );
  $sub-map: $map;
  @each $key in $keys {
    @if type_of($sub-map) != 'map' or not map-has-key($sub-map, $key) {
      @error '#{$path} does not exist in #{$map}';
      @return false;
    }
    $sub-map: map-get($sub-map, $key);
  }
  @return $sub-map;
}
