@charset "UTF-8";

////
/// Documentation for all Base variable maps
///
/// @ignore
///   This file is not actually built by the CSS system, it is here to provide top-level documentation for the `base` css scaffold
///
/// @group base|_documentation
///
/// @type map
///
/// @see {mixin} properties
////

// ---------------------------------------------------------------------------------------------------------------------
/// # Default Element Map
/// This map generates the default `property`: `value` pairs for a given CSS element.
///
/// In Decanter, the intended use case for the `base/` `--default` variables is to output a set of normalized HTML properties.
///
/// To change the output of `base`, modify it's corresponding `group__element` map in your own project, which will be merged with the default map so you don't have to re-declare properties.
///
/// There may be some cases in which you want to completely override the `group__element--default` map, if that's the case, you should also do this in your own project's variables.
///
/// **Note:** *Due to the way `key:value` pairs work in SCSS maps, you can only declare one property per map. This means edge cases where you want to output fallbacks for a property should probably be handled in a different way.*
///
/// **Second Note:** When merging nested maps, the map merge will replace the value of the entire nested map. This is a limitation of Sass's implementation. This means if you want to replace a single property in a :before nested declaration, for example, you'll have to redeclare the entire element in the override map.
///
/// This pattern applies to all default variable maps in `base/`
///
/// @example scss - SCSS - Default element map
///   group__element--default: (
///     property1: value1,
///     property2: value2,
///     property3: value3,
///     // etc...
///   )!default;
///
/// @example css - CSS - Default Output
///   element {
///     property1: value1;
///     property2: value2;
///     property3: value3;
///     // etc...
///   }
///
$group__element--default: (
    property1: value1,
    property2: value2,
    property3: value3,
  // etc...
)!default;

// ---------------------------------------------------------------------------------------------------------------------
/// # Element Map
/// This map generates `property`: `value` overrides for it's corresponding `--default` map.
///
/// In `base.scss`, the intended use case for this map is to serve as a hook to modify the base styling generated by decanter, so you would declare this variable in your own project before importing `base`
///
/// You will notice that on the base decanter project, all of these are empty placeholder maps. This is by design.
///
/// This pattern applies to all variable maps in `base/`
///
/// @example scss - Default element map
///   group__element--default: (
///     property1: value1,
///     property2: value2,
///     property3: value3,
///     // etc...
///   )!default;
///
/// @example scss - Element map
///   $group__element: (
///     property1: my-value1,
///     property3: null, // By explicitly declaring a
///                      // null value in the merged map,
///                      // we can suppress this property
///     my-new-property: my-new-value,
///     // etc...
///   }
///
/// @example scss - Merged SCSS Output
///   element {
///     property1: my-value1;
///     property2: value2;
///     my-new-property: my-new-value;
///     // etc...
///   }
///
$group__element: (
    property1: my-value1,
    property3: null,
    my-new-property: my-new-value,
  // ...
)!default;

/// `CSS Elements` in `base` are generated via the `properties()` mixin, which merges the above maps and outputs the corresponding css
///
/// @example scss - In use throughout `base/`:
///   element {
///     @include properties($group__element--default, $group__element);
///   }
///
/// @require {mixin} properties>
%element  {
  @include properties($group__element--default, $group__element);
}

/*
// ---------------------------------------------------------------------------------------------------------------------
/// - Base documentation cut & paste template.
/// - Base styles for the `eelement` element
///
/// @example scss - Used in `base/_lists.scss` by the `eelement` element
///   eelement {
///     @include properties($lists__eelement--default, $typography__eelement);
///   }
///
/// @require --
///
/// @todo --
///
/// @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/eelement
///

$lists__eelement--default: () !default;

$lists__eelement: () !default;

eelement {
  @include properties($lists__eelement--default, $lists__eelement);
}
*/
