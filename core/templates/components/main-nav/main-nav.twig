{%- if markup is not empty %}
  {# If custom markup is provided, emit it as is #}
  {{ markup }}
{% else -%}
  {# If no custom markup, generate markup based on structured data #}
<nav {{- attributes }} class="su-main-nav {{ modifier_class }}" aria-label="Main">
  <button class="su-main-nav__toggle {{- button_modifier_class}}" aria-expanded="false">{{ toggle_text }}</button>
  {% if lv1 is not empty -%}
    <ul class="su-main-nav__menu-lv1">
      {% for item in lv1 %}
        {% set is_parent = item.lv2 is empty ? false : true %}

        <li class="{% if is_parent %}su-main-nav__item--parent{% endif %} {% if item.current %}su-main-nav__item--current{% endif %}">{% spaceless %}
          <a href="{{ item.href }}" {% if item.target is not empty %}target="{{ item.target }}"{% endif %}>{{ item.text }}</a>{% endspaceless %}

          {% if is_parent -%}
            <ul class="su-main-nav__menu-lv2">
              {%- for item_lv2 in item.lv2 -%}
                {% spaceless %}<li class="{% if item_lv2.current %}su-main-nav__item--current{% endif %}">
                  <a href="{{ item_lv2.href }}" {% if item_lv2.target is not empty %}target="{{ item_lv2.target }}"{% endif %}>{{ item_lv2.text }}</a>
                </li>{% endspaceless %}

              {% endfor %}
            </ul>
          {% endif -%}
        </li>
      {% endfor %}
    </ul>
  {% endif %}
  {% if "su-main-nav--mobile-search" in modifier_class %}
    {#- We reuse the site search component here. -#}
    {% include "@decanter/components/site-search/site-search.twig" with
      {
        "action": "https://www.stanford.edu/search",
        "method": "get",
        "search_label": "Search this site",
        "placeholder": "Search this site",
        "search_input_name": "search-field",
        "search_icon_src": "../../../img/icon-search.svg"
      }
    %}
  {% endif %}
</nav>
{% endif %}
<script>
  document.addEventListener("DOMContentLoaded", function(event) {
    NodeList.prototype.forEach = NodeList.prototype.forEach || Array.prototype.forEach; // Make node lists behave like arrays
    const allNavs = document.querySelectorAll('.su-main-nav'); // return nodelist of all instances of main nav on page

    // if more than 1 main nav, assign lower z-index to main navs lower on the page so they don't cover each other up
    if ( allNavs.length > 1 ) {
      const firstZindex = getComputedStyle( allNavs[0], null).zIndex;
      for (let i=1; i < allNavs.length; i++) {
        allNavs[i].style.zIndex = firstZindex - 300 * i;
      }
    }

    for (let k=0; k < allNavs.length; k++) {
      const mainNav = allNavs[k];
      mainNav.id = `su-main-nav-${k}`;
      const mainNavToggle = mainNav.querySelector('.su-main-nav__toggle');
      mainNavToggle.id = `su-main-nav__toggle-${k}`;

      const mainMenu = mainNav.querySelector('.su-main-nav__menu-lv1');
      const mobileSearch = mainNav.querySelector('.su-site-search');

      const parents = mainNav.querySelectorAll('.su-main-nav__menu-lv1 > .su-main-nav__item--parent');
      const parentLinks = mainNav.querySelectorAll('.su-main-nav__menu-lv1 > .su-main-nav__item--parent > a');
      const level1Links = mainNav.querySelectorAll('.su-main-nav__menu-lv1 > li > a');
      const level2Links = mainNav.querySelectorAll('.su-main-nav__menu-lv2 > li > a');
      const firstLink = mainMenu.firstElementChild.querySelector('a');
      const lastLink = mainMenu.lastElementChild.querySelector('a');

      // Function to check if an element has aria-expanded set to true
      const isExpanded = x => x.getAttribute('aria-expanded') === 'true';

      // Function to check if we're using desktop version of main nav (horizontal)
      // If menu toggle button is not shown, then we're on desktop and return true
      const isDesktop = () => getComputedStyle(mainNavToggle, null).display === 'none';

      // Function to check if a search box is included for the mobile menu
      const hasMobileSearch = () => {
        return ( mainNav.querySelector('.su-site-search') !== null);
      };

      // function to check if there are open subnavs
      const hasOpenSubnav = () => {
        let numOpenSubnav = 0;
        for (let i = 0; i < parentLinks.length; i++) {
          if (isExpanded(parentLinks[i])) {
            numOpenSubnav++;
            if (numOpenSubnav > 0) {
              break;
            }
          }
        }
        return numOpenSubnav > 0;
      };

      const ariaSetTrue = x => x.setAttribute('aria-expanded', 'true');
      const ariaSetFalse = x => x.setAttribute('aria-expanded', 'false');

      const expandMenu = x => {
        x.classList.add('su-main-nav__item--expanded');
        ariaSetTrue(x.querySelector('a'));
      };

      const collapseMenu = x => {
        x.classList.remove('su-main-nav__item--expanded');
        ariaSetFalse(x.querySelector('a'));
      };

      const openMobileMenu = () => {
        ariaSetTrue(mainNavToggle);
        ariaSetTrue(mainMenu);
        firstLink.focus(); // Focus on the first top level link
        mainNavToggle.innerHTML = 'Close';
      };

      const closeMobileMenu = () => {
        ariaSetFalse(mainNavToggle);
        ariaSetFalse(mainMenu);
        mainNavToggle.focus(); // Return focus to the toggle button
        mainNavToggle.innerHTML = 'Menu';
      };

      const closeAllOpenSubnavs = () => {
        for (let i = 0; i < parentLinks.length; i++) {
          if (isExpanded(parentLinks[i])) {
            collapseMenu(parents[i]);
          }
        }
      };

      // ---------------------------------
      // Add click listeners to top level menu items and links
      // ---------------------------------
      for (let i=0; i < parents.length; i++) {
        parents[i].addEventListener('click', function(e) {
          e = e || window.event;
          if ( !(isExpanded( parentLinks[i] )) ) {
            closeAllOpenSubnavs(); // First close all opened drop down menus
            // Toggle 2nd level menu
            expandMenu( parents[i] );
            parents[i].querySelector('.su-main-nav__menu-lv2 > li:first-child > a').focus(); // focus on first subnav link
          } else {
            collapseMenu( parents[i] );
          }
        }, false);

        // Make parent links inactive and act as drop down toggles
        parentLinks[i].addEventListener('click', function(e) {
          e = e || window.event;
          e.preventDefault();
        });
      }

      // ---------------------------------
      // When there are open subnavs, click anywhere on the site to close them (except when click on another parent link)
      // ---------------------------------
      document.addEventListener('click', function(e) {
        e = e || window.event; // Use e if it exists or e will be equal to window.event for IE
        const eventElement = e.target || e.srcElement; // e.srcElement is IE equiv of e.target
        if ( !eventElement.closest('.su-main-nav__item--parent') ) {
          closeAllOpenSubnavs();
        }
      }, false);

      // ---------------------------------
      // Toggle hamburger button and changes button text
      // ---------------------------------
      mainNavToggle.addEventListener('click', function(e) {
        if ( isExpanded( mainNavToggle ) ) {
          closeMobileMenu();
        } else {
          openMobileMenu();
        }
      }, false);

      // ---------------------------------
      // Listens to keydown event while mobile site search is focused
      // ---------------------------------
      if ( hasMobileSearch() ) {
        mobileSearch.onkeydown = function(e) {
          e = e || window.event;
          const press = e.key || e.keyCode; // fallback to keyCode if key isn't supported by older browsers

          // Close mobile menu if ESC is pressed
          if ((press === 'Escape' || press === 'Esc' || press === 27) && isExpanded(mainNavToggle)) {
            closeMobileMenu();
          }
        };
      }

      // ---------------------------------
      // listens to keydown on top level links
      // ---------------------------------
      for (let i=0; i < level1Links.length; i++) {
        level1Links[i].addEventListener('keydown', function(e) {
          e = e || window.event;
          const press = e.key || e.keyCode;
          const currentFocus = document.activeElement;
          const isLevel1Parent = () => currentFocus.parentNode.classList.contains('su-main-nav__item--parent');

          if ( press === 'Home' || press === 122 ) {
            firstLink.focus(); // Focus on the first top level menu link when HOME button is pressed
          } else if ( press === 'End' || press === 123 ) {
            lastLink.focus(); // Focus on the last top level menu link when END button is pressed
          } else if ( ( press === ' ' || press === 'Spacebar' || press === 'Enter' || press === 32 || press === 13 ) && isLevel1Parent() ) {
            expandMenu( currentFocus.parentNode );
            e.preventDefault();
            currentFocus.parentNode.querySelector('.su-main-nav__menu-lv2 > li:first-child > a').focus();
          }

          if ( isDesktop() ) {

            if ( ( press === 'ArrowDown' || press === 'Down' || press === 40 ) && isLevel1Parent() ) {
              expandMenu( currentFocus.parentNode );
              e.preventDefault(); // prevent page scrolling
              currentFocus.parentNode.querySelector('.su-main-nav__menu-lv2 > li:first-child > a').focus();
            } else if ( press === 'ArrowRight' || press === 'Right' || press === 39 ) {
              e.preventDefault();
              closeAllOpenSubnavs();
              if (currentFocus === lastLink) {
                firstLink.focus();
              } else {
                currentFocus.parentNode.nextElementSibling.querySelector('a').focus();
              }
            } else if ( press === 'ArrowLeft' || press === 'Left' || press === 37 ) {
              e.preventDefault();
              closeAllOpenSubnavs();
              if (currentFocus === firstLink) {
                lastLink.focus();
              } else {
                currentFocus.parentNode.previousElementSibling.querySelector('a').focus();
              }
            } else if ( press === 'Escape' || press === 'Esc' || press === 27 ) {
              closeAllOpenSubnavs();
            }

          } else if ( !isDesktop() ) {

            if ( press === 'ArrowDown' || press === 'Down' || press === 40 ) {
              e.preventDefault();
              if (currentFocus === lastLink) {
                firstLink.focus();
              } else {
                currentFocus.parentNode.nextElementSibling.querySelector('a').focus();
              }
            } else if ( press === 'ArrowUp' || press === 'Up' || press === 38 ) {
              e.preventDefault();
              if (currentFocus === firstLink) {
                lastLink.focus();
              } else {
                currentFocus.parentNode.previousElementSibling.querySelector('a').focus();
              }
            } else if ( press === 'Escape' || press === 'Esc' || press === 27 ) {
              closeAllOpenSubnavs();
              if ( !hasOpenSubnav() && isExpanded( mainNavToggle ) ) {
                closeMobileMenu();
              }
            }

          }

        }, false);
      }

      // ---------------------------------
      // listens to keydown on 2nd level subnav links
      // ---------------------------------
      for (let i = 0; i < level2Links.length; i++) {
        level2Links[i].addEventListener('keydown', function(e) {
          e = e || window.event;
          const press = e.key || e.keyCode;

          const currentFocus = document.activeElement;
          const firstSubnavLink = currentFocus.parentNode.parentNode.firstElementChild.querySelector('a');
          const lastSubnavLink = currentFocus.parentNode.parentNode.lastElementChild.querySelector('a');
          const parentMenuItem = currentFocus.parentNode.parentNode.parentNode;


          if (press === 'ArrowDown' || press === 'Down' || press === 40) {
            e.preventDefault();
            if (currentFocus === lastSubnavLink) {
              firstSubnavLink.focus();
            } else {
              currentFocus.parentNode.nextElementSibling.querySelector('a').focus();
            }
          } else if (press === 'ArrowUp' || press === 'Up' || press === 38) {
            e.preventDefault();
            if (currentFocus === firstSubnavLink) {
              lastSubnavLink.focus();
            } else {
              currentFocus.parentNode.previousElementSibling.querySelector('a').focus();
            }
          } else if ((press === 'Tab' || press === 9) && (currentFocus === lastSubnavLink)) { // hitting TAB while on last submenu link closes submenu
            collapseMenu(parentMenuItem);
          } else if (press === 'Home' || press === 122) {
            firstSubnavLink.focus(); // Focus on the first subnav link when HOME button is pressed
          } else if (press === 'End' || press === 123) {
            lastSubnavLink.focus(); // Focus on the last subnav link when END button is pressed
          } else if ((press === 'Escape' || press === 'Esc' || press === 27) && hasOpenSubnav()) {
            parentMenuItem.classList.remove('su-main-nav__item--expanded');
            parentLinks.forEach(ariaSetFalse);
            parentMenuItem.querySelector('a').focus();
          }

          if (isDesktop()) {
            if (press === 'ArrowRight' || press === 'Right' || press === 39) {
              collapseMenu(parentMenuItem);
              e.preventDefault();
              if (parentMenuItem.querySelector('a') !== lastLink) {
                parentMenuItem.nextElementSibling.querySelector('a').focus();
              } else {
                firstLink.focus();
              }
            } else if (press === 'ArrowLeft' || press === 'Left' || press === 37) {
              collapseMenu(parentMenuItem);
              e.preventDefault();
              if (parentMenuItem.querySelector('a') !== firstLink) {
                parentMenuItem.previousElementSibling.querySelector('a').focus();
              } else {
                lastLink.focus();
              }
            }
          }

        }, false);
      }

      // ---------------------------------
      // Listens to when window finishes resizing (after 250 ms), if menu is desktop version and menu toggle aria is expanded, set it to false
      // ---------------------------------
      const closeButtonWhenDesktop = debounce(function() {
        if (isDesktop() && isExpanded(mainNavToggle)) {
          ariaSetFalse(mainNavToggle);
          mainNavToggle.innerHTML = 'Menu';
          mainMenu.removeAttribute('aria-expanded'); // no need for aria-expanded attribute when on desktop
        }
      }, 250);

      window.addEventListener('resize', closeButtonWhenDesktop);

    } // end of for loop

  });

  // ---------------------------------
  // Debounce function: Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  // ---------------------------------
  function debounce(func, wait, immediate) {
    let timeout;
    return function () {
      var context = this, args = arguments;
      var later = function () {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  }
</script>
