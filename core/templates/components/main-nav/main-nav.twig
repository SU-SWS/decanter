<nav {{ attributes }} id="su-main-nav" class="su-main-nav {{ modifier_class }}" aria-label="Main Menu">
  <button id="su-main-nav__toggle" class="su-main-nav__toggle" aria-expanded="false" aria-haspopup="menu">Menu</button>
  <ul class="su-main-nav__menu-lv1">
    <li class="su-main-nav__item-lv1">
      <a href="#">Home</a>
    </li>
    <li aria-haspopup="true" aria-expanded="false" class="su-main-nav__item-lv1 su-main-nav__item-lv1--parent su-main-nav__item-lv1--current">
      <a href="#">Admissions &amp; Aid</a>
      <ul class="su-main-nav__menu-lv2" role="menu" aria-label="submenu">
        <li class="su-main-nav__item-lv2">
          <a href="#">Overview</a>
        </li>
        <li class="su-main-nav__item-lv2">
          <a href="#">Name &amp; Emblems</a>
        </li>
        <li class="su-main-nav__item-lv2 su-main-nav__item-lv2--current">
          <a href="#">Current Page</a>
        </li>
        <li class="su-main-nav__item-lv2">
          <a href="#">Color</a>
        </li>
      </ul>
    </li>
    <li class="su-main-nav__item-lv1">
      <a href="#">Students &amp; Academics</a>
    </li>
    <li aria-haspopup="true" aria-expanded="false" class="su-main-nav__item-lv1 su-main-nav__item-lv1--parent">
      <a href="#">Research</a>
      <ul class="su-main-nav__menu-lv2" role="menu" aria-label="submenu">
        <li class="su-main-nav__item-lv2">
          <a href="#">Overview</a>
        </li>
        <li class="su-main-nav__item-lv2">
          <a href="#">Arts</a>
        </li>
        <li class="su-main-nav__item-lv2">
          <a href="#">Humanities</a>
        </li>
        <li class="su-main-nav__item-lv2">
          <a href="https://stanford.edu">Science</a>
        </li>
      </ul>
    </li>
    <li class="su-main-nav__item-lv1">
      <a href="#">Get Involved</a>
    </li>
    <li class="su-main-nav__item-lv1">
      <a href="#">About</a>
    </li>
  </ul>
</nav>
<script>
  NodeList.prototype.forEach = NodeList.prototype.forEach || Array.prototype.forEach; //Make nodelists behave like arrays
  var mainNav = document.getElementById('su-main-nav');
  var mainMenu = document.querySelector('.su-main-nav__menu-lv1');
  var mainNavToggle = document.getElementById('su-main-nav__toggle');
  var parents = mainMenu.querySelectorAll('.su-main-nav__item-lv1--parent');
  var parentLinks = mainMenu.querySelectorAll('.su-main-nav__item-lv1--parent > a');
  var firstLink = mainMenu.firstElementChild.querySelector('a');
  var lastLink = mainMenu.lastElementChild.querySelector('a');

  function ariaSetTrue (x) {
    x.setAttribute('aria-expanded', 'true');
  }

  function ariaSetFalse (x) {
    x.setAttribute('aria-expanded', 'false');
  }

  for(let j=0; j<parents.length; j++) {
    parents[j].addEventListener('click', function(e) {

      if( parents[j].getAttribute('aria-expanded') === 'false' ) {

        // First close all opened drop down menus
        parents.forEach( ariaSetFalse );

        // Toggle 2nd level menu
        ariaSetTrue( parents[j] );
      } else if( parents[j].getAttribute('aria-expanded') === 'true' ) {
        ariaSetFalse( parents[j] );
      }
    }, false);

    // Make parent links inactive and act as drop down toggles
    parentLinks[j].addEventListener('click', function(e) {
      e.preventDefault();
    });
  }

  // Close opened drop down menus when click elsewhere
  document.addEventListener('click', function(e) {
    var e = e ? e : window.event;
    var event_element = e.target ? e.target : e.srcElement;
    if( !event_element.closest('.su-main-nav__item-lv1--parent') ) {
      for(let i=0; i<parents.length; i++) {
        ariaSetFalse( parents[i] );
      }
    }
  }, false);

  // Toggle hamburger button and changes button text
  mainNavToggle.addEventListener('click', function(e) {
    if( mainNavToggle.getAttribute('aria-expanded') === 'false' ) {
      ariaSetTrue( mainNavToggle );
      ariaSetTrue( mainMenu );
      mainNavToggle.innerHTML = 'Close';
    } else if( mainNavToggle.getAttribute('aria-expanded') === 'true' ) {
      ariaSetFalse( mainNavToggle );
      ariaSetFalse( mainMenu );
      mainNavToggle.focus(); // Return focus to the toggle button
      mainNavToggle.innerHTML = 'Menu';
    }
  }, false);

  // Keyboard bindings listens to keydown events within the mainNav element
  mainNav.onkeydown = function(e) {
    var press = e.keyCode;
    var currentFocus = document.activeElement;

    // Close all opened drop down menus when ESC key is pressed
    if (press == 27) {

      if (mainNavToggle.getAttribute('aria-expanded') === 'true') {
        ariaSetFalse( mainNavToggle );
      } else if (mainNavToggle.getAttribute('aria-expanded') === 'false') {
        for (let j = 0; j < parents.length; j++) {
          ariaSetFalse( parents[j] );
        }
      }
    }

    // if focus is on first or second level menu links, allows using HOME/END keys to jump to first/last first level link
    if ( currentFocus.parentNode.classList.contains('su-main-nav__item-lv1') || currentFocus.parentNode.classList.contains('su-main-nav__item-lv2') ) {
      // Focus on the first first level menu item link when END button is pressed
      if (press == 67) {
        firstLink.focus();
      }

      // Focus on the last first level menu item link when HOME button is pressed
      if (press == 68) {
        lastLink.focus();
      }
    }

    // if the focus is on first level menu links on desktop, allows using left/right arrow keys to navigate
    if ( currentFocus.parentNode.classList.contains('su-main-nav__item-lv1') && getComputedStyle(mainNavToggle,null).display === 'none' ) {
      if (press == 39) { // right arrow
        if (currentFocus !== lastLink) {
          currentFocus.parentNode.nextElementSibling.querySelector('a').focus();
        } else if (currentFocus === lastLink) {
          firstLink.focus();
        }
      }

      if (press == 37) { // left arrow
        if (currentFocus !== firstLink) {
          currentFocus.parentNode.previousElementSibling.querySelector('a').focus();
        } else if (currentFocus === firstLink) {
          lastLink.focus();
        }
      }
    }

    // if focus is on first level parent links on desktop, press down arrow or spacebar to open submenu and focus on first child link
    if ( currentFocus.parentNode.classList.contains('su-main-nav__item-lv1--parent') && getComputedStyle(mainNavToggle,null).display === 'none' ) {

      if (press == 40 || press == 32) { // down arrow or spacebar
        ariaSetTrue( currentFocus.parentNode );
        e.preventDefault(); // prevent down scrolling
        currentFocus.parentNode.querySelector('.su-main-nav__menu-lv2 > li:first-child > a').focus();
      }
    }

    if ( currentFocus.parentNode.classList.contains('su-main-nav__item-lv2') ) {
      var firstSubnavLink = currentFocus.parentNode.parentNode.firstElementChild.querySelector('a');
      var lastSubnavLink = currentFocus.parentNode.parentNode.lastElementChild.querySelector('a');

      if ( press == 40 ) { // down arrow
        e.preventDefault(); // prevent page scrolling
        if (currentFocus !== lastSubnavLink ) {
          currentFocus.parentNode.nextElementSibling.querySelector('a').focus();
        } else if (currentFocus === lastSubnavLink ) {
          currentFocus.parentNode.parentNode.firstElementChild.querySelector('a').focus();
        }
      } else if ( press == 38 ) { // up arrow
        e.preventDefault();
        if (currentFocus !== firstSubnavLink ) {
          currentFocus.parentNode.previousElementSibling.querySelector('a').focus();
        } else if (currentFocus === firstSubnavLink ) {
          currentFocus.parentNode.parentNode.lastElementChild.querySelector('a').focus();
        }
      }

      if ( press == 39 ) { // right arrow
        ariaSetFalse(currentFocus.parentNode.parentNode.parentNode);
        currentFocus.parentNode.parentNode.parentNode.nextElementSibling.querySelector('a').focus();
      } else if ( press == 37 ) { // left arrow
        ariaSetFalse(currentFocus.parentNode.parentNode.parentNode);
        currentFocus.parentNode.parentNode.parentNode.previousElementSibling.querySelector('a').focus();
      }
    }
  }
</script>
