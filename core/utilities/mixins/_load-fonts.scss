@charset 'UTF-8';

////
/// Font loading function.
/// @group mixins
////

/// Global default fonts.
$fonts: () !default;

/// Keeps track of already loaded fonts.
$loaded-fonts: () !default;

/// Load a collection of @font-face fonts
///
/// @require $fonts
/// @require $loaded-fonts
/// @require _check-loaded-font
/// @require {function} _log-loaded-font
@mixin load-fonts($load: $fonts) {

  // String
  @if type-of($load) == string {
    // Cast the item to a string to be sure we don't pass
    // strange variables to the loader.
    $_item-string: '#{$load}';
    @if _check-loaded-font($_item-string) {
      @debug "Font: #{$_item-string} already loaded.";
    } @else {
      $_tmp: _log-loaded-font($_item-string);
      $_item-string: quote($_item-string);
      @import url($_item-string);
    }
    // List
  } @else if type-of($load) == list {
    // Loop through each item in the passed in list.
    @each $_item in $load {
      // Cast the item to a string to be sure we don't pass
      // strange variables to the loader.
      $_item-string: '#{$_item}';
      @if _check-loaded-font($_item-string) {
        @debug "Font: #{$_item-string} already loaded.";
      } @else {
        $_tmp: _log-loaded-font($_item-string);
        $_item-string: quote($_item-string);
        @import url($_item-string);
      }
    }
    // Map
  } @else if type-of($load) == map {
    // Loop through each item in the passed in map.
    @each $_index, $_item in $load {
      @each $_font in $_item {
        // Cast the item to a string to be sure we don't pass
        // strange variables to the loader.
        $_item-string: '#{$_font}';
        @if _check-loaded-font($_item-string) {
          @debug "Font: #{$_item-string} already loaded.";
        } @else {
          $_tmp: _log-loaded-font($_item-string);
          $_item-string: quote($_item-string);
          @import url($_item-string);
        }
      }
    }
  }
}
