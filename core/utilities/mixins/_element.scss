@charset "UTF-8";

////
/// Element
/// @author Kevin Garcia
/// @group mixins|elements
////

///
/// Returns an element with property:value pairs based on a map. If no maps are available, it outputs it's own @content
/// @content
///
/// @param {selector} $element - The CSS selector that the property map applies to
/// @param {map} default-settings [null] - The default map the mixin consumes
/// @param {map} settings [null] - The optional override map to merge in
///
///
/// @example scss - source SCSS
///  $default-map: (
///      color: blue,
///      margin: 0 auto,
///  );
///
///  $map-override: (
///      color: red,
///      overflow: hidden,
///      '&:after': (
///        content: '"pseudo element"',
///        display: block,
///      )
///  );
///
///
///  @include ('.element', $default-map, $map-override);
///
/// @example css - output CSS
///   .element {
///     color: red;
///     margin: 0 auto;
///     overflow: hidden;
///   }
///
///   .element:after {
///     content: "pseudo element";
///     display: block;
///   }
///
/// @requires {mixin} element-properties

@mixin element($element, $default-settings: null, $settings: null) {
  $_settings: smart-merge($default-settings, $settings);

  #{$element} {
    @if ($_settings == null) {
      @warn '$_settings map returned a null value. Attempting to use @content instead';
      @content;
    } @else {
      @include element-properties($default-settings, $settings);
    }
  }
}
