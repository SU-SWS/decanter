@charset "UTF-8";

// ========================================================
// function set-container-padding()
//
// This function is called by the centered-section mixin.
// It's important to note that the intended use of this,
// along with the companion set-container-margin function
// is to modify a container that occupies the entire width
// of the browser, and not a nested container with it's own
// margin.
// ========================================================

@function _set-container-padding(
  $columns: null,
  $grid: $neat-grid,
  $v-space: 1em,
  $max-width: false
)
{
  $columns: _neat-column-default($grid, $columns); // Retrieves max columns from specified grid if empty, or the specified number of columns otherwise
  $_grid-columns: _retrieve-neat-setting($grid, columns); // Retrieves the number of max columns from the specified grid
  $_grid-gutter: _retrieve-neat-setting($grid, gutter); // Retrieves the gutter from the specified grid
  //Checks to see if we need to add a max-width.
  @if $max-width == false {
    // Checks to see if we need to calculate a gutter
    @if $_grid-columns >= $columns {
      $_column-multiplier: $_grid-columns - $columns;
      @return $v-space calc(((100vw/#{$_grid-columns * 2}) * #{$_column-multiplier}) + #{$_grid-gutter});
    } @else {
      @return $v-space $_grid-gutter;
    }
    // Otherwise we calculate the max width in pixels
  } @else if type_of($max-width) == number {
    $_container-width: (px($max-width) / #{$_grid-columns * 2}) * $columns;
    @return $v-space calc(50vw - #{$_container-width} + #{$_grid-gutter});
    // Finally, if max width is set to true, we use the project's "max-container-width" configuration option.
  } @else if ($max-width == true) {
    $_container-width: (px($max-container-width) / #{$_grid-columns * 2}) * $columns;
    @return $v-space calc(50vw - #{$_container-width} + #{$_grid-gutter});
  }
}
