@charset "UTF-8";

//
// @grid--container
//
// Mixin to apply to the wrapper of all class-based layouts.
//
// Style guide: Mixins.Grid.grid--container
//

@mixin grid--container($gap: $gutter-md) {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: wrap;
  margin: auto;
  max-width: $site-max-width;
  @include padding(null $site-margins-mobile);

  @media #{$breakpoint-md} {
    @include padding(null $site-margins);
  }
}

//
// @grid--item
//
// Mixin to apply to an element within a class-based grid row.
//
// Style guide: Mixins.Grid.grid--item
//

@mixin grid--item {
  @media #{$breakpoint-md-only} {
    &:last-child:nth-child(odd) {
      width: calc(1 / 1 * 100% - (#{(1 - 1 / 1) * $gutter-md}));
    }
  }
}

//
// @grid--12-of-12
//
// Mixin to apply to an element that should occupy 12/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--12-of-12
//

@mixin grid--12-of-12 {
  width: 100%;
}

//
// @grid--6-of-12
//
// Mixin to apply to an element that should occupy 6/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--6-of-12
//

@mixin grid--6-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(6 / 12 * 100% - (#{(1 - 6 / 12) * $gutter-lg}));
  }
}

//
// @grid--3-of-12
//
// Mixin to apply to an element that should occupy 3/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--3-of-12
//

@mixin grid--3-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(3 / 12 * 100% - (#{(1 - 3 / 12) * $gutter-lg}));
  }
}

//
// @grid--9-of-12
//
// Mixin to apply to an element that should occupy 9/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--9-of-12
//

@mixin grid--9-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(9 / 12 * 100% - (#{(1 - 9 / 12) * $gutter-lg}));
  }
}

//
// @grid--4-of-12
//
// Mixin to apply to an element that should occupy 4/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--4-of-12
//

@mixin grid--4-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(4 / 12 * 100% - (#{(1 - 4 / 12) * $gutter-lg}));
  }
}

//
// @grid--8-of-12
//
// Mixin to apply to an element that should occupy 8/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--8-of-12
//

@mixin grid--8-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(8 / 12 * 100% - (#{(1 - 8 / 12) * $gutter-lg}));
  }
}

//
// @grid--2-of-12
//
// Mixin to apply to an element that should occupy 2/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--2-of-12
//

@mixin grid--2-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(2 / 12 * 100% - (#{(1 - 2 / 12) * $gutter-lg}));
  }
}

//
// @grid--10-of-12
//
// Mixin to apply to an element that should occupy 10/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--10-of-12
//

@mixin grid--10-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(10 / 12 * 100% - (#{(1 - 10 / 12) * $gutter-lg}));
  }
}

//
// @grid--1-of-12
//
// Mixin to apply to an element that should occupy 1/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--1-of-12
//

@mixin grid--1-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(1 / 12 * 100% - (#{(1 - 1 / 12) * $gutter-lg}));
  }
}

//
// @grid--5-of-12
//
// Mixin to apply to an element that should occupy 5/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--5-of-12
//

@mixin grid--5-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(5 / 12 * 100% - (#{(1 - 5 / 12) * $gutter-lg}));
  }
}

//
// @grid--7-of-12
//
// Mixin to apply to an element that should occupy 7/12 of a class-based grid row.
//
// Style guide: Mixins.Grid.grid--7-of-12
//

@mixin grid--7-of-12 {
  width: 100%;

  @media #{$breakpoint-md} {
    width: calc(1 / 2 * 100% - (#{(1 - 1 / 2) * $gutter-md}));
  }

  @media #{$breakpoint-lg} {
    width: calc(7 / 12 * 100% - (#{(1 - 7 / 12) * $gutter-lg}));
  }
}
